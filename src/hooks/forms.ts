import { computed } from 'vue'
import { useLocalStorage } from '@vueuse/core'
import { useNpmFiles } from '@/utils'
import {
  checkReproductionLink,
  removeReproductionPrefix,
  resolveReproductionLink,
} from '@/utils/reproduction'
import type { MaybeRef } from '@vueuse/core'
import type { Ref } from 'vue'
import type { Rule } from 'async-validator'

export const buildTools = [
  'Vite',
  'Webpack',
  'Vue CLI',
  'Rollup',
  'CDN',
  'Other',
] as const

export const bugTypes = [
  'Component',
  'TypeScript',
  'Style',
  'i18n',
  'Build',
  'Performance',
  'Docs',
  'Other',
] as const

export const featureTypes = [
  'New Component',
  'Enhancement',
  'TypeScript',
  'i18n',
  'Docs',
  'Other',
] as const

export interface Form {
  type: 'bug-report' | 'feature-request'
  title: string
  additional: string
  bugReport: FormBugReport
  featureRequest: FormFeatureRequest
}

export interface FormBugReport {
  epVersion: string
  vueVersion: string
  browser: string
  buildTool: '' | typeof buildTools[number]
  bugType: '' | typeof bugTypes[number]
  components: string[]
  reproductionLink: string
  reproduce: string
  expected: string
  actual: string
}

export interface FormFeatureRequest {
  featureType: '' | typeof featureTypes[number]
  newComponentName: string
  enhancedComponentName: string
  description: string
}

export const removeComponentPrefix = (name: string) => name.replace(/^el-/, '')

export const useForm = () => {
  const defaultForm: Form = {
    type: 'bug-report',
    title: '',
    additional: '',
    bugReport: {
      epVersion: '',
      vueVersion: '',
      browser: '',
      buildTool: '',
      bugType: '',
      components: [],
      reproductionLink: '',
      reproduce: '',
      expected: '',
      actual: '',
    },
    featureRequest: {
      featureType: '',
      newComponentName: '',
      enhancedComponentName: '',
      description: '',
    },
  }
  let form = $(useLocalStorage('issue', defaultForm))

  const rules: Record<string, Rule> = {
    'bugReport.reproductionLink': [
      {
        validator: (field, value: string) => {
          if (value.startsWith('!')) return true
          return checkReproductionLink(value)
        },
      },
    ],
  }

  const reset = () => (form = defaultForm)

  return $$({
    form,
    rules,
    reset,
  })
}

export const useComponentList = (
  epVersions: Ref<string[]>,
  epVersion?: MaybeRef<string>
) => {
  const files = $(
    useNpmFiles(
      'element-plus',
      computed(() => unref(epVersion) || epVersions.value[0])
    )
  )
  const components = $computed(() => [
    ...new Set(
      files
        .map((file) => /\/es\/components\/(.*?)\/.*$/.exec(file.name)?.[1])
        .filter((name): name is string => !!name)
        .map((name) => `el-${name}`)
    ),
  ])

  return $$(components)
}
export const templateBugReport = (form: Form) => {
  const { t } = useI18n()

  const titleTags = ['Bug Report']
  if (form.bugReport.bugType !== 'Other') titleTags.push(form.bugReport.bugType)
  if (
    form.bugReport.components.length <= 2 &&
    !form.bugReport.components.includes('N/A')
  )
    titleTags.push(
      form.bugReport.components
        .map((component) => removeComponentPrefix(component))
        .join(', ')
    )
  return {
    title: `${titleTags.map((tag) => `[${tag}]`).join(' ')} ${form.title}`,
    content: `
<!-- generated by https://issue.element-plus.org/ DO NOT REMOVE -->

Bug Type: **\`${form.bugReport.bugType}\`**

## Environment

- Vue Version: \`${form.bugReport.vueVersion}\`
- Element Plus Version: \`${form.bugReport.epVersion}\`
- Browser / OS: \`${form.bugReport.browser}\`
- Build Tool: \`${form.bugReport.buildTool}\`

## Reproduction

### Related Component

${form.bugReport.components.map((component) => `- \`${component}\``).join('\n')}

### Reproduction Link

[${
      resolveReproductionLink(form.bugReport.reproductionLink)?.name ?? 'Link'
    }](${removeReproductionPrefix(form.bugReport.reproductionLink)})

### Steps to reproduce

${form.bugReport.reproduce}

### What is Expected?

${form.bugReport.expected}

### What is actually happening?

${form.bugReport.actual}

### Additional comments

${form.additional || '_(empty)_'}

<!-- ${t('screenshot')} -->

    `.trim(),
  }
}

export const templateFeatureRequest = (form: Form) => {
  const { t } = useI18n()

  const titleTags = ['Feature Request']
  if (form.featureRequest.featureType !== 'Other')
    titleTags.push(form.featureRequest.featureType)

  if (!['All', 'N/A'].includes(form.featureRequest.enhancedComponentName))
    titleTags.push(
      removeComponentPrefix(form.featureRequest.enhancedComponentName)
    )

  const details: string[][] = []

  if (form.featureRequest.featureType === 'New Component') {
    if (form.featureRequest.newComponentName)
      details.push(['New component name', form.featureRequest.newComponentName])
  } else if (form.featureRequest.enhancedComponentName) {
    details.push([
      'Enhanced compone nt name',
      removeComponentPrefix(form.featureRequest.enhancedComponentName),
    ])
  }

  return {
    title: `${titleTags.map((tag) => `[${tag}]`).join(' ')} ${form.title}`,
    content: `
<!-- generated by https://issue.element-plus.org/ DO NOT REMOVE -->

Feature type: **\`${form.featureRequest.featureType}\`**

## Details

${details.map(([title, value]) => `- ${title}: \`${value}\``).join('\n')}

## Description

${form.featureRequest.description}

### Additional comments

${form.additional || '_(empty)_'}

<!-- ${t('screenshot')} -->
    `.trim(),
  }
}
