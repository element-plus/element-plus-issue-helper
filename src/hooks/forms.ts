import { useLocalStorage } from '@vueuse/core'
import { toRef } from 'vue'
import { getFiles, resolveCommaString } from '@/utils'
import {
  checkReproductionLink,
  removeReproductionPrefix,
  resolveReproductionLink,
} from '@/utils/reproduction'
import type { Rule } from 'async-validator'
import type { ElForm } from 'element-plus'

export const buildTools = [
  'Vite',
  'Webpack',
  'Vue CLI',
  'Rollup',
  'CDN',
  'Other',
] as const

export interface Form {
  type: 'bug-report' | 'feature-request'
  title: string
  epVersion: string
  vueVersion: string
  browser: string
  buildTool: '' | typeof buildTools[number]
  componentName: string
  reproductionLink: string
  reproduce: string
  expected: string
  actual: string
  additional: string
}

export const useForm = () => {
  let form$ = $ref<InstanceType<typeof ElForm>>()

  const defaultForm: Form = {
    type: 'bug-report',
    title: '',
    epVersion: '',
    vueVersion: '',
    browser: '',
    buildTool: '',
    componentName: '',
    reproductionLink: '',
    reproduce: '',
    expected: '',
    actual: '',
    additional: '',
  }
  let form = $(useLocalStorage('issue', defaultForm))

  const rules: Partial<Record<keyof Form, Rule>> = {
    componentName: [
      {
        asyncValidator: async (rule, text: string) => {
          if (!form.epVersion)
            throw new Error('please select element plus version')
          const passed = resolveCommaString(text)
            .map((comp) => comp.replace(/^el-/, ''))
            .every((component) =>
              files.some((file) => {
                return file.name.startsWith(`/es/components/${component}/`)
              })
            )
          if (!passed) {
            throw new Error('please input correct component name')
          }
        },
      },
    ],
    reproductionLink: [
      {
        validator: (field, value: string) => {
          if (value.startsWith('!')) return true
          return checkReproductionLink(value)
        },
      },
    ],
  }

  let files = $(getFiles('element-plus', toRef(form, 'epVersion')))

  const reset = () => (form = defaultForm)

  return $$({
    form$,
    form,
    rules,
    files,
    reset,
  })
}

export const templateBugReport = (form: Form) => ({
  title: `[Bug Report] [${resolveCommaString(form.componentName)
    .map((component) => component.replace(/^el-/, ''))
    .join(', ')}] ${form.title}`,
  content: `
  <!-- generated by https://elementui.github.io/issue-generator DO NOT REMOVE -->

## Environment

- Vue Version: 3.2.1
- Element Plus Version: 1.2.3
- Browser / OS: ${form.browser}
- Build Tool: ${form.buildTool}

## Reproduction

### Related Component

${resolveCommaString(form.componentName)
  .map((component) => `- ${component}`)
  .join('\n')}

### Reproduction Link

[${
    resolveReproductionLink(form.reproductionLink)?.name ?? 'Link'
  }](${removeReproductionPrefix(form.reproductionLink)})

### Steps to reproduce

${form.reproduce}

### What is Expected?

${form.expected}

### What is actually happening?

${form.actual}

### Additional comments

${form.additional || '_(empty)_'}

<!-- If you need to insert a screenshot, please paste it here. -->

<!-- generated by https://elementui.github.io/issue-generator DO NOT REMOVE -->
  `.trim(),
})
