import { computed } from 'vue'
import { useLocalStorage } from '@vueuse/core'
import { getFiles } from '@/utils'
import {
  checkReproductionLink,
  removeReproductionPrefix,
  resolveReproductionLink,
} from '@/utils/reproduction'
import type { Ref } from 'vue'
import type { Rule } from 'async-validator'
import type { ElForm } from 'element-plus'

export const buildTools = [
  'Vite',
  'Webpack',
  'Vue CLI',
  'Rollup',
  'CDN',
  'Other',
] as const

export const bugTypes = [
  'Component',
  'TypeScript',
  'Style',
  'i18n',
  'Build',
  'Docs',
  'Other',
] as const

export interface Form {
  type: 'bug-report' | 'feature-request'
  title: string
  epVersion: string
  vueVersion: string
  browser: string
  buildTool: '' | typeof buildTools[number]
  bugType: '' | typeof bugTypes[number]
  components: string[]
  reproductionLink: string
  reproduce: string
  expected: string
  actual: string
  additional: string
}

export const useForm = (epVersions: Ref<string[]>) => {
  let form$ = $ref<InstanceType<typeof ElForm>>()

  const defaultForm: Form = {
    type: 'bug-report',
    title: '',
    epVersion: '',
    vueVersion: '',
    browser: '',
    buildTool: '',
    bugType: '',
    components: [],
    reproductionLink: '',
    reproduce: '',
    expected: '',
    actual: '',
    additional: '',
  }
  let form = $(useLocalStorage('issue', defaultForm))

  const rules: Partial<Record<keyof Form, Rule>> = {
    reproductionLink: [
      {
        validator: (field, value: string) => {
          if (value.startsWith('!')) return true
          return checkReproductionLink(value)
        },
      },
    ],
  }

  let files = $(
    getFiles(
      'element-plus',
      computed(() => form.epVersion || epVersions.value[0])
    )
  )
  let components = $computed(() => [
    ...new Set(
      files
        .map((file) => /\/es\/components\/(.*?)\/.*$/.exec(file.name)?.[1])
        .filter((name): name is string => !!name)
        .map((name) => `el-${name}`)
    ),
  ])

  const reset = () => (form = defaultForm)

  return $$({
    form$,
    form,
    rules,
    components,
    reset,
  })
}

export const templateBugReport = (form: Form) => {
  const titleTags = ['Bug Report']
  if (form.bugType !== 'Other') titleTags.push(form.bugType)
  if (form.components.length <= 2 && !form.components.includes('N/A'))
    titleTags.push(
      form.components
        .map((component) => component.replace(/^el-/, ''))
        .join(', ')
    )
  return {
    title: `${titleTags.map((tag) => `[${tag}]`).join(' ')} ${form.title}`,
    content: `
<!-- generated by https://elementui.github.io/issue-generator DO NOT REMOVE -->

Bug Type: **\`${form.bugType}\`**

## Environment

- Vue Version: \`${form.vueVersion}\`
- Element Plus Version: \`${form.epVersion}\`
- Browser / OS: \`${form.browser}\`
- Build Tool: \`${form.buildTool}\`

## Reproduction

### Related Component

${form.components.map((component) => `- \`${component}\``).join('\n')}

### Reproduction Link

[${
      resolveReproductionLink(form.reproductionLink)?.name ?? 'Link'
    }](${removeReproductionPrefix(form.reproductionLink)})

### Steps to reproduce

${form.reproduce}

### What is Expected?

${form.expected}

### What is actually happening?

${form.actual}

### Additional comments

${form.additional || '_(empty)_'}

<!-- If you need to insert a screenshot, please paste it here. -->

<!-- generated by https://elementui.github.io/issue-generator DO NOT REMOVE -->
    `.trim(),
  }
}
